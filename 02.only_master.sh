#!/usr/bin/bash

# control-plaine 컴포넌트 구성
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --cri-socket unix:///var/run/cri-dockerd.sock >> /home/ubuntu/kubeadm_init.log
# ...
# [addons] Applied essential addon: kube-proxy
# Your Kubernetes control-plane has initialized successfully!

# Kubectl을 명령 실행 허용하려면 kubeadm init 명령의 실행결과 나온 내용을 동작해야 함(인증서를 생성함)
sudo mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# 토큰 값 확인
# kubeadm token list
# TOKEN                     TTL         EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS
# d14be3.lmivnxli58qxnvff   19h         2023-02-22T02:16:35Z   authentication,signing   The default bootstrap token generated by 'kubeadm init'.   system:bootstrappers:kubeadm:default-node-token

# 해시 값 확인
# openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
# d02d719f85d34dc70dd009d3ba5dd4c686d6341e4c494eef5df12f332ad8ae98

# Calico 설치
# CNI(컨테이너 네트워크 인터페이스) 기반 Pod 네트워크 추가 기능을 배포해야 Pod가 서로 통신할 수 있습니다. 네트워크를 설치하기 전에 클러스터 DNS(CoreDNS)가 시작되지 않습니다.
# kubectl get nodes
# NAME       STATUS     ROLES           AGE     VERSION
# master     NotReady   control-plane   7m31s   v1.24.8

# Pod 네트워크가 호스트 네트워크와 겹치지 않도록 주의해야함. 
# Calico 설치
sudo kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/tigera-operator.yaml
sudo kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/custom-resources.yaml

# node 초기화 될때까지 기다림
# watch kubectl get pods -n calico-system
sudo while [`kubectl get pods -n calico-system | awk '{print $3}' | grep -ie pending -e init`] ; do kubectl get pods -n calico-system >> /home/ubuntu/calico_status.log ; sleep 1; done

sudo kubectl get pods -n calico-system >> /home/ubuntu/calico_status.log
# NAME                                       READY   STATUS    RESTARTS   AGE
# calico-kube-controllers-85666c5b94-927wg   1/1     Running   0          82s
# calico-node-hcnp9                          1/1     Running   0          82s
# calico-typha-f8845f557-cwgmx               1/1     Running   0          83s
# csi-node-driver-l94kh                      2/2     Running   0          40s

# 다시 확인
sudo kubectl get nodes >> /home/ubuntu/kubectl_nodes.log
# NAME     STATUS   ROLES           AGE     VERSION
# master   Ready    control-plane   5m15s   v1.24.8

# Calico Mode 변경- 지왕님 search 도움(고마워요 지왕님)
# https://github.com/projectcalico/calico - release 버전확인후 조절.
sudo curl -L https://github.com/projectcalico/calico/releases/download/v3.24.1/calicoctl-linux-amd64 -o calicoctl
sudo chmod +x calicoctl
sudo mv calicoctl /usr/bin

sudo calicoctl get ippool -o wide >> /home/ubuntu/calico_status.log
# NAME                  CIDR             NAT    IPIPMODE   VXLANMODE     DISABLED   DISABLEBGPEXPORT   SELECTOR   
# default-ipv4-ippool   192.168.0.0/16   true   Never      CrossSubnet   false      false              all()

cat << END > ipipmode.yaml 
apiVersion: projectcalico.org/v3
kind: IPPool
metadata:
  name: default-ipv4-ippool
spec:
  blockSize: 26
  cidr: 192.168.0.0/16
  ipipMode: Always
  natOutgoing: true
  nodeSelector: all()
  vxlanMode: Never
END

sudo calicoctl apply -f ipipmode.yaml >> /home/ubuntu/calico_status.log
sudo calicoctl get ippool -o wide >> /home/ubuntu/calico_status.log
# NAME                  CIDR             NAT    IPIPMODE   VXLANMODE   DISABLED   DISABLEBGPEXPORT   SELECTOR   
# default-ipv4-ippool   192.168.0.0/16   true   Always     Never       false      false              all()

# 자동완성 기능
sudo apt-get install bash-completion -y
sudo source <(kubectl completion bash) 
sudo echo "source <(kubectl completion bash)" >> ~/.bashrc 

# etcd 설치
sudo export RELEASE=$(curl -s https://api.github.com/repos/etcd-io/etcd/releases/latest|grep tag_name | cut -d '"' -f 4)
sudo wget https://github.com/etcd-io/etcd/releases/download/${RELEASE}/etcd-${RELEASE}-linux-amd64.tar.gz
sudo tar xf etcd-${RELEASE}-linux-amd64.tar.gz
sudo cd etcd-${RELEASE}-linux-amd64
sudo mv etcd etcdctl etcdutl /usr/local/bin
sudo etcd --version

# ubuntu 사용자가 kubectl 명령 실행 가능하도록 설정
sudo mkdir -p ~ubuntu/.kube
sudo cp -i /etc/kubernetes/admin.conf ~ubuntu/.kube/config
sudo chown -R ubuntu:ubuntu ~ubuntu/.kube

sudo su - ubuntu
source <(kubectl completion bash); echo "source <(kubectl completion bash)" >> ~/.bashrc 
kubectl get nodes >> /home/ubuntu/kubectl_nodes.log
# NAME     STATUS   ROLES           AGE   VERSION
# master   Ready    control-plane   10m   v1.25.2
# node1    Ready    <none>          84s   v1.25.2
# node2    Ready    <none>          80s   v1.25.2